#!/usr/bin/env node

// Libraries setup
require('coffee-script');

var Environment = require('../src/Environment.coffee');
var SiteParser = require('../src/SiteParser.coffee');

var ansi = require('ansi');
var cursor = ansi(process.stdout);

// Libraries instances setup
var SiteParser = new SiteParser();
var Environment = new Environment();

// Config load
var config = Environment.prepare(process.argv.splice(2));

// Restatic
if(config != false) {
    // Extractor setup
	var Extractor = require(config.extractor);
	var Extractor = new Extractor();

	switch(config.mode)
	{
		case 'fetch':
 			cursor.green().write('Restatic started fetching data from spreadsheet defined in ').blue().write(config.source + 'restatic.json').reset().write(' to ').blue().write(config.target).write('\n').reset();
 			Extractor.extract(config.apiKey, config.delimiter, config.target, config.excludable, function (data, target, excludable) {
 				Environment.storeResult(data, config.source);
 			});
  			break;

		case 'process':
			cursor.green().write('Restatic started parsing html files from ').blue().write(config.source).reset().write(' to ').blue().write(config.target).green().write(' using ').blue().write(config.extractorName).write('\n').reset();
			Environment.loadData(config.source, config.target, config.excludable, SiteParser.parse);			
  			break;

		default:
  			cursor.green().write('Restatic started parsing html files from ').blue().write(config.source).reset().write(' to ').blue().write(config.target).write('\n').reset();
			Extractor.extract(config.apiKey, config.delimiter, config.target, config.excludable, SiteParser.parse);
	}
} else {
	if(config.finished == false) {
		cursor.green().write("Usage: parse google docs spreadsheet content using 'restatic source_folder target_folder' or \'restatic -d\' if you want to generate site from actual location to folder _site '\n").reset();
	}
}